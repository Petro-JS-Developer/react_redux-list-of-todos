{"version":3,"sources":["API/api.js","store/index.ts","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","result","json","data","currentTodos","state","selectedUserId","initialState","loading","message","allTodosFromServer","todosFromServer","store","dispatch","type","filteredTodo","newArr","updateTodos","updateTodo","status","updateUserId","id","updateUserIdActions","createStore","action","filter","todo","completed","title","toLowerCase","includes","inputValue","toLocaleLowerCase","composeWithDevTools","TodoList","className","onChange","event","target","value","placeholder","onClick","randomNumber","Math","floor","random","length","randomArrTodo","i","push","console","log","map","key","classnames","checked","newTodo","userId","CurrentUser","info","this","loadedData","prevProps","props","setState","Object","keys","name","email","phone","React","Component","App","currentTodo","useSelector","selectedUserIds","useEffect","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcf2ecfa.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nconst BASE_URL = `https://mate-api.herokuapp.com`;\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then(result => result.json())\n  .then(result => result.data);\n\nexport const getTodos = () => request(`/todos`);\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { getTodos } from '../API/api.js';\nimport { TodoInterface } from '../typeObject';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SELECTED_ALL_TODO = 'SELECTED_ALL_TODO';\nconst SELECTED_ACTIVE_TODO = 'SELECTED_ACTIVE_TODO';\nconst SELECTED_COMPLETED_TODO = 'SELECTED_COMPLETED_TODO';\nconst FIND_VALUE_IN_TITLE = 'FIND_VALUE_IN_TITLE';\nconst UPDATE_USER_ID = 'UPDATE_USER_ID';\nconst UPDATE_TODOS = 'UPDATE_TODOS';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\nexport const selectedAllTodo = () => ({ type: SELECTED_ALL_TODO });\nexport const selectedActiveTodo = () => ({ type: SELECTED_ACTIVE_TODO });\nexport const selectedCompletedTodo = () => ({ type: SELECTED_COMPLETED_TODO });\nexport const updateTodos = (newArr: TodoInterface) => ({ type: UPDATE_TODOS, currentTodos: newArr });\nexport const findValueInTitle = (state: RootState) => ({ type: FIND_VALUE_IN_TITLE, currentTodos: state.currentTodos });\nexport const updateUserIdActions = (id: number) => ({ type: UPDATE_USER_ID, selectedUserId: id });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const currentTodos = (state: RootState) => state.currentTodos;\nexport const selectedUserId = (state: RootState) => state.selectedUserId;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  message: string;\n  allTodosFromServer: TodoInterface[],\n  currentTodos: TodoInterface[],\n  selectedUserId: number,\n};\n\nconst initialState: RootState = {\n  loading: false,\n  message: '',\n  allTodosFromServer: [],\n  currentTodos: [],\n  selectedUserId: 0,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true, allTodosFromServer: action.result, currentTodos: action.result, selectedUserId: 0 };\n\n    case SELECTED_ALL_TODO:\n      return {\n        ...state,\n        currentTodos: state.allTodosFromServer,\n      };\n\n    case SELECTED_ACTIVE_TODO:\n      return {\n        ...state,\n        currentTodos: state.allTodosFromServer.filter((todo: any) => todo.completed),\n      };\n\n    case SELECTED_COMPLETED_TODO:\n      return {\n        ...state,\n        currentTodos: state.allTodosFromServer.filter((todo: any) => !todo.completed),\n      };\n\n      case UPDATE_TODOS:\n        return {\n          ...state,\n          currentTodos: action.currentTodos,\n        };\n\n    case FIND_VALUE_IN_TITLE:\n      return {\n        ...state,\n        currentTodos: state.allTodosFromServer.filter(todo => (\n          !todo.title && typeof todo.title === 'object' ? ''\n            : todo.title.toLowerCase()\n              .includes(action.inputValue.toLocaleLowerCase())))\n      };\n\n    case UPDATE_USER_ID:\n      return {\n        ...state,\n        selectedUserId: action.selectedUserId,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const todosFromServer = () => {\n  getTodos()\n    .then(result => {\n      store.dispatch({ type: 'START_LOADING', result });\n    })\n}\n\nexport const filteredTodo = (newArr: TodoInterface) => {\n  store.dispatch(updateTodos(newArr));\n}\n\nexport const updateTodo = (status: string) => {\n  if (status === 'All') {\n    store.dispatch(selectedAllTodo());\n  }\n\n  if (status === 'active') {\n    store.dispatch(selectedActiveTodo());\n  }\n\n  if (status === 'completed') {\n    store.dispatch(selectedCompletedTodo());\n  }\n}\n\nexport const updateUserId = (id: number) => {\n  store.dispatch(updateUserIdActions(id))\n}\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport store, { filteredTodo } from '../../store';\n\nexport const TodoList = ({\n  currentTodos,\n  updateUserId,\n  updateTodos,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__control\">\n      <select\n        className=\"TodoList__control__selected\"\n        onChange={(event) => {\n          updateTodos(event.target.value);\n        }}\n      >\n        <option>All</option>\n        <option>active</option>\n        <option>completed</option>\n      </select>\n      <input\n        type=\"text\"\n        className=\"TodoList__control__search\"\n        placeholder=\"search for todo by name\"\n        onChange={(event) => {\n          store.dispatch({ type: 'FIND_VALUE_IN_TITLE', inputValue: event.target.value })\n        }}\n      />\n      <button\n        type=\"button\"\n        onClick={() => {\n          const randomNumber = Math.floor(Math.random() * currentTodos.length);\n          const randomArrTodo = [];\n\n          // eslint-disable-next-line no-plusplus\n          for (let i = randomNumber; i < currentTodos.length; i++) {\n            randomArrTodo.push(currentTodos[i]);\n          }\n\n          // eslint-disable-next-line no-plusplus\n          for (let i = randomNumber - 1; i >= 0; i--) {\n            randomArrTodo.push(currentTodos[i]);\n          }\n\n          filteredTodo(randomArrTodo);\n        }}\n      >\n        Randomize\n      </button>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {console.log(currentTodos)}\n        {\n          currentTodos.map(todo => {\n            return (\n              <li key={todo.id}\n                className={\n                  classnames('TodoList__item', `${todo.completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked'}`)\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => {\n                      filteredTodo(currentTodos.map(newTodo => (\n                        newTodo.id === todo.id\n                          ? {\n                            ...newTodo, completed: !todo.completed,\n                          } : newTodo)));\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                TodoList__user-button\n                button\n              \"\n                  type=\"button\"\n                  onClick={() => {\n                    updateUserId(`${todo.userId}`);\n                  }}\n                >\n                  User&nbsp;#\n              {todo.userId}\n                </button>\n              </li>\n            )\n          }\n          )}\n      </ul>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../API/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    info: {},\n  }\n\n  componentDidMount() {\n    this.loadedData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadedData();\n    }\n  }\n\n  loadedData() {\n    getUser(this.props.userId)\n      .then(info => (\n        this.setState({ info })\n      ));\n  }\n\n  render() {\n    const { info } = this.state;\n    const { updateUserId } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {Object.keys(info).length === 0\n          ? (\n            <div className=\"center\">\n              <div className=\"lds-ring\">\n                <div />\n                <div />\n                <div />\n                <div />\n              </div>\n            </div>\n\n          )\n          : (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {info.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{info.name}</h3>\n              <p className=\"CurrentUser__email\">{info.email}</p>\n              <p className=\"CurrentUser__phone\">{info.phone}</p>\n              <button\n                type=\"button\"\n                className=\"CurrentUser__clear\"\n                onClick={() => {\n                  updateUserId(0);\n                }}\n              >\n                Clear\n              </button>\n            </>\n          )\n\n        }\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.string.isRequired,\n  updateUserId: PropTypes.func.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport { currentTodos, updateTodo, updateUserId, selectedUserId, todosFromServer } from './store';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  const currentTodo = useSelector(currentTodos);\n  const selectedUserIds = useSelector(selectedUserId);\n\n  useEffect(() => {\n    todosFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"App__sidebar\">\n        <TodoList\n          currentTodos={currentTodo}\n          updateUserId={updateUserId}\n          updateTodos={updateTodo}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserIds ? (\n            <CurrentUser\n              userId={selectedUserIds}\n              updateUserId={updateUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}